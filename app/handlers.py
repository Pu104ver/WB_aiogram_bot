import time

from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from app.database.database import async_session
from app.database.db_requests import DBRequest
from app.database.models import Users, RequestHistory
from config import bot
import app.keybords as kb

router = Router()


class ArticleNumber(StatesGroup):
    article = State()


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    async with async_session() as session:
        await DBRequest.add_new_user(username=message.from_user.username, tg_id=message.from_user.id,
                                     chat_id=message.chat.id)
        await DBRequest.create_tables()

        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
                             f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá",
                             reply_markup=kb.subscribe)


@router.message(Command('help'))
async def command_help_handler(message: Message) -> None:
    subscribed_users = await DBRequest.get_subscribed_users()

    await DBRequest.add_new_user(username=message.from_user.username, tg_id=message.from_user.id,
                                 chat_id=message.chat.id)
    await message.answer(f"–ë—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã, {message.from_user.full_name}!\n"
                         f"–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–æ–º–æ—â–Ω–∏–∫–∞ —Å –±—ã—Å—Ç—Ä—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ "
                         f"—Ç–æ–≤–∞—Ä–µ –ø–æ –µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª—É —Å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏ Wildberries.\n"
                         f"–¢–∞–∫–∂–µ, –±–æ—Ç –æ–±–ª–∞–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Ä–∞—Å—Å—ã–ª–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                         reply_markup=kb.main)
    for user in subscribed_users:
        await message.answer(f'{user.id=}')


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ")
async def get_product_information_state_one(message: Message, state: FSMContext) -> None:
    await state.set_state(ArticleNumber.article)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')


@router.message(ArticleNumber.article)
async def get_product_information_state_two(message: Message, state: FSMContext) -> None:
    try:
        if not message.text.isdigit():
            raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª')

        await state.update_data(article=message.text)
        data = await state.get_data()
        article = data['article']
        await state.clear()

        product_data: dict = await DBRequest.get_product_info(article)
        if product_data:
            await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_data['name']}\n'
                                 f'–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: {product_data['article']}\n'
                                 f'–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {product_data['cost']:.2f}\n'
                                 f'–†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞: {product_data['rating']}\n'
                                 f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {product_data['quantity']}\n', reply_markup=kb.subscribe)
        else:
            raise ValueError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ü§î')
        async with async_session() as session:
            user_id = await DBRequest.get_user_id_from_db(session=session, user_tg_id=message.from_user.id)
            if user_id:
                await DBRequest.add_request_history(user_id=user_id, article_number=article)
            else:
                raise ValueError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–¥. –ö–∞–∂–µ—Ç—Å—è, –º—ã –µ—â–µ –Ω–µ —É—Å–ø–µ–ª–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n'
                                 '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start')

    except ValueError as e:
        await state.clear()
        await message.answer(f'{e}')


@router.callback_query(F.data == 'subscribe')
async def subscribe_user(query: CallbackQuery):
    try:
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        user: Users = await DBRequest.get_user(user_id)

        if not user:
            await bot.send_message(chat_id, "–ö–∞–∂–µ—Ç—Å—è, –º—ã –µ—â–µ –Ω–µ —É—Å–ø–µ–ª–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n"
                                            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        else:
            await DBRequest.update_user_subscription(user_id, is_subscribed=True)
            await bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
    except Exception as e:
        await query.message.answer(f'{e}')


@router.message(F.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def unsubscribe_user(message: Message):
    user_id = message.from_user.id

    user: Users = await DBRequest.get_user(user_id)

    if user:
        await DBRequest.update_user_subscription(user_id, is_subscribed=False)
        await bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
    else:
        await bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –º—ã –µ—â–µ –Ω–µ —É—Å–ø–µ–ª–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n"
                                                "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–¥")
async def get_entry_from_db(message: types.Message) -> None:
    user_id = message.from_user.id
    user: Users = await DBRequest.get_user(user_id)

    if not user:
        return await bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è –º—ã –µ—â–µ –Ω–µ —É—Å–ø–µ–ª–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n"
                                                       "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")

    entries: list[RequestHistory] = await DBRequest.get_last_entries_from_request_history(user.id, limit=5)

    if not entries:
        await message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞")
    else:
        response_message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –∏–∑ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n\n"
        for index, entry in enumerate(entries, start=1):
            response_message += f"–ó–∞–ø–∏—Å—å {index}:\n"
            response_message += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {entry.request_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            response_message += f"–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: `{entry.article_number}`\n\n"
        await bot.send_message(message.chat.id, response_message, parse_mode="MARKDOWN")


@router.message()
async def unknown_message(message: Message) -> None:
    await bot.send_sticker(chat_id=message.chat.id,
                           sticker='CAACAgIAAxkBAAJLpGYDDtYawdlo4YG906DEZfxi0SpRAALLHgACznXoSYcdHS7Sv5ErNAQ')


@router.message(F.text == "‚ù§Ô∏è")
async def love_forever(message: Message) -> None:
    chat_id = message.chat.id
    time.sleep(2)

    await bot.send_sticker(chat_id=chat_id,
                           sticker='CAACAgIAAxkBAAJLs2YDESKA4nFAH0XFC6X1Xq9d2LLLAAJMGgAC06JQSCg_2bTHGe2rNAQ')
    time.sleep(2)

    await bot.send_sticker(chat_id=chat_id,
                           sticker='CAACAgIAAxkBAAJLsGYDEK7H0Ryoager_p3UOtC9IOVKAAKePwACVJXRSlUXKnfxWfroNAQ')
    time.sleep(2)

    await bot.send_sticker(chat_id=chat_id,
                           sticker='CAACAgIAAxkBAAJLp2YDD5HGZrL2gNWcTNQ8rUtMr1e0AAL_QgACREPQSoVASDeKw3UENAQ')
    time.sleep(0.5)

    await bot.send_sticker(chat_id=chat_id,
                           sticker='CAACAgIAAxkBAAJGFGXsrpz-VynHXUJebcuLGgFVREcSAALFRQACH2zZSvOiWj0k8AGTNAQ')
    time.sleep(3)

    await bot.send_sticker(chat_id=chat_id,
                           sticker='CAACAgIAAxkBAAJLqmYDD5c7eE86c2QBid0wliOcik1fAAIrPAACo-LRSup6uIGmro4BNAQ')
    time.sleep(1)

    await bot.send_sticker(chat_id=chat_id,
                           sticker='CAACAgIAAxkBAAJLrWYDEKdhIRdS93I_yBGHPNez2GrmAAJuQgACFd7QSrCVYcHKNDhZNAQ')
    time.sleep(1)

    await bot.send_message(chat_id=chat_id, text='Just kiddingüòâ\nLove 4 ever‚ù§')
    await bot.send_sticker(chat_id=chat_id,
                           sticker='CAACAgIAAxkBAAJLtmYDEmRIP0rGxuHVBYN5_02eeSjFAAIBSAACFiTYSk2MX883v9C5NAQ')
